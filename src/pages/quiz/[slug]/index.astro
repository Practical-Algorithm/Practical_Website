---
import Footer from "@/components/quiz/Footer.astro";
import QuizLayout from "@/layouts/QuizLayout.astro";
import ProgressBar from "@/components/quiz/ProgressBar.astro";
import AnswerSection from "@/components/quiz/AnswerSection.astro";
import type { Meta } from "@/layouts/BaseLayout.astro";

import { getEntry } from "astro:content";

import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import QuestionTitle from "@/components/quiz/QuestionTitle.astro";

const { slug } = Astro.params;
if (!slug) {
  throw new Error("Missing slug in URL");
}

const quizEntry = await getEntry("quiz", slug);

if (!quizEntry) {
  throw new Error(`Quiz not found: ${slug}`);
}

const { quizImage, correctAnswerIndex, title } = quizEntry.data;

const cookieKey = `quiz-${slug}`;

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const playerAnswer = data.get("player__answer");

    if (typeof playerAnswer !== "string") {
      throw new Error("No answer provided");
    }

    Astro.cookies.set(
      cookieKey,
      JSON.stringify({ answerIndex: playerAnswer }),
      {
        maxAge: 60 * 60 * 24 * 7,
      }
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

let answerIndex = undefined;
if (Astro.cookies.has(cookieKey)) {
  const cookieValue = Astro.cookies.get(cookieKey);
  const { answerIndex: cookieAnswerIndex } = cookieValue?.json();
  answerIndex = parseInt(cookieAnswerIndex);
  Astro.cookies.delete(cookieKey);
}
const isAnswered = answerIndex !== undefined;
const isCorrectAnswer = answerIndex === correctAnswerIndex;

// Meta
const meta: Meta = {
  title: slug,
  description: title,
};
---

<QuizLayout {meta}>
  <header class="quiz__header">
    <button type="button" class="quiz__close-button btn-link icon-only">
      <Icon name="ion/close-outline" size={24} />
    </button>
    <ProgressBar />
    <!-- <PlayerTimer /> -->
    <div class="player__header-section">
      <button type="button" class="btn-link">
        <Icon name="ion/ellipsis-vertical" size={24} />
      </button>
    </div>
  </header>
  <div class="lesson-scroll-area">
    <main class="quiz__content">
      <QuestionTitle {quizEntry} {isAnswered} />
      <article class="main-content scrollable-area">
        <div class="image-card">
          <Image
            transition:name="player__quiz_image"
            src={quizImage}
            alt="Quiz-card"
            width={1253}
            height={1006}
            class="rounded-lg"
          />
        </div>
        <AnswerSection {answerIndex} {slug} {quizEntry} />
      </article>
      <Footer {isAnswered} {isCorrectAnswer} />
    </main>
  </div>
</QuizLayout>

<style>
  .quiz__header {
    @apply p-4 md:p-6 lg:px-28 self-center;
    @apply shrink-0 flex justify-between items-center;
    @apply w-full h-20;
    @apply z-10;
  }

  .quiz__content {
    @apply pt-6;
    @apply p-4 md:p-6 lg:px-28 self-center;
    @apply text-xl;
  }

  .main-content {
    @apply pt-6;
    @apply lg:grid grid-cols-8 gap-6;
    grid-template-rows: auto 1fr;
  }

  .main-content:has(.choices) {
    @apply md:grid;
  }

  .btn-link {
    --button-size: 24px;

    @apply text-md font-semibold;
    @apply flex relative items-center;
    @apply text-fg-secondary;
    transition: color 0.2s cubic-bezier(0.25, 0.01, 0.25, 1) 0s;

    width: var(--button-size);
    height: var(--button-size);
  }

  .btn-link:hover {
    @apply text-fg-secondary_hover;
  }

  .player__header-section {
    @apply ml-4 md:ml-6;
  }

  .image-card {
    grid-column: 1/5;
    grid-row: 1/2;
  }
</style>
